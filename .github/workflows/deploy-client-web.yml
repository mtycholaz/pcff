# This is a basic workflow to help you get started with Actions

name: Deploy Web  Client

# Controls when the workflow will run
on:
    push:
        tags:
            - 'undeploy'
        paths:
            - apps/pcff-app/**/*
            - libs/client/**/*
            - libs/shared/**/*
            - libs/data/**/*
            - .github/workflows/deploy-client-web.*
    workflow_call:
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:
        inputs:
            deploy_override:
                description: Set to YES to deploy (else run CI only).
            version:
                description: Provide a version in the format name_r.*.*.*.
env:
    REGION: us-east-1
jobs:
    setup:
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
        env:
            PIPELINE_EXECUTION_ROLE: ${{ secrets.AWS_PIPELINE_EXEC_ROLE_ARN }}
        outputs:
            app-version-major: ${{ steps.tag-version.outputs.app-version-major }}
            app-version-minor: ${{ steps.tag-version.outputs.app-version-minor }}
            branch-name: ${{steps.get-branch-name.outputs.branch-name}}
            api-endpoint: ${{steps.api-endpoint.outputs.api-endpoint}}
            upload-bucket: ${{steps.upload-bucket.outputs.upload-bucket}}
            cloudfront-id: ${{steps.cloudfront-id.outputs.cloudfront-id}}
        steps:

            - name: Check out repository
              uses: actions/checkout@v2

            - name: Determine branch name
              uses: ./.github/actions/get-branch-name
              id: get-branch-name

            - name: Assume the pipeline user role
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-region: ${{ env.REGION }}
                  role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
                  role-duration-seconds: 3600
                  role-skip-session-tagging: true

            - name: Get api endpoint
              id: api-endpoint
              if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call') && !startsWith(github.ref, 'refs/tags/undeploy')
              run: |
                  url=$(aws cloudformation describe-stacks --stack-name=${{steps.get-branch-name.outputs.branch-name}}-api --query "Stacks[*].Outputs[?OutputKey == 'ApiUrl'][].OutputValue | [0]")
                  url=${url//\"/}
                  echo "Api Url is $url"
                  echo "::set-output name=api-endpoint::$url"

            - name: Get S3 bucket
              id: upload-bucket
              run: |
                  bucket=$(aws cloudformation describe-stacks --stack-name=${{steps.get-branch-name.outputs.branch-name}}-web --query "Stacks[*].Outputs[?OutputKey == 'BucketUrl'][].OutputValue | [0]")
                  bucket=${bucket//\"/}
                  echo "S3 bucket is $bucket"
                  echo "::set-output name=upload-bucket::$bucket"

            - name: Get cloudfront CDN id
              id: cloudfront-id
              if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call') && !startsWith(github.ref, 'refs/tags/undeploy')
              run: |
                  cdn=$(aws cloudformation describe-stacks --stack-name=${{steps.get-branch-name.outputs.branch-name}}-web --query "Stacks[*].Outputs[?OutputKey == 'CdnDistributionId'][].OutputValue | [0]")
                  cdn=${cdn//\"/}
                  echo "Cloudfront distribution id is $cdn"
                  echo "::set-output name=cloudfront-id::$cdn"

            - name: Setup App Versioning
              run: |
                  if [[ '${{github.event.inputs.deploy_override}}' == 'YES' ]]
                  then
                    echo "APP_VERSION_STRING=${{github.event.inputs.version}}" >> $GITHUB_ENV
                  else
                    echo "APP_VERSION_STRING=app_r.1.0.0" >> $GITHUB_ENV
                  fi

            - name: Get Tag Version
              uses: ./.github/actions/get-tag-version
              id: tag-version
              with:
                  tag-name: ${{env.APP_VERSION_STRING}}

    delete-feature:
        # delete/ undeploy when code is pushed to a feature branch with tag undeploy
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/undeploy')
        runs-on: ubuntu-latest
        needs: [setup]
        permissions:
            id-token: write
            contents: read
        env:
            PIPELINE_EXECUTION_ROLE: ${{ secrets.AWS_PIPELINE_EXEC_ROLE_ARN }}
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-python@v2
            - uses: aws-actions/setup-sam@v1

            - name: Assume the pipeline user role
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-region: ${{ env.REGION }}
                  role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
                  role-session-name: cicd-deleting-web
                  role-duration-seconds: 3600
                  role-skip-session-tagging: true

            - name: Delete web stack
              uses: ./.github/actions/delete-web-stack
              with:
                  branch-name: ${{needs.setup.outputs.branch-name}}
                  region: ${{env.REGION}}

    build:
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call') && !startsWith(github.ref, 'refs/tags/undeploy') && needs.setup.outputs.upload-bucket != '' && needs.setup.outputs.cloudfront-id != '' && needs.setup.outputs.api-endpoint != ''
        runs-on: ubuntu-latest
        needs: [setup]
        permissions:
            id-token: write
            contents: read
        env:
            PIPELINE_EXECUTION_ROLE: ${{ secrets.AWS_PIPELINE_EXEC_ROLE_ARN }}
        steps:
            - name: Check out repository
              uses: actions/checkout@v2

            #    TODO: Move these actions to the web-aws-cicd repo and use tokens to authenticate
            #
            #    https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-an-action-in-the-same-repository-as-the-workflow
            #    https://docs.github.com/en/actions/creating-actions/creating-a-composite-action#prerequisites
            #    https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token

            - name: Assume the pipeline user role
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-region: ${{ env.REGION }}
                  role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
                  role-duration-seconds: 3600
                  role-skip-session-tagging: true

            - name: Setup Node.js dependencies
              uses: actions/setup-node@v3
              with:
                  node-version: 16.x

            - name: Install dependencies
              uses: ./.github/actions/ng-install-deps

            - name: Build
              env:
                  NODE_OPTIONS: '--max-old-space-size=4096'
              run: npm run build:pcff

            - name: Set branch label
              uses: jacobtomlinson/gha-find-replace@v2
              with:
                  find: '###BRANCH_LABEL###'
                  replace: ${{needs.setup.outputs.branch-name}}
                  include: dist/**.js

            - name: Set api endpoint
              uses: jacobtomlinson/gha-find-replace@v2
              with:
                  find: '###API_ENDPOINT###'
                  replace: ${{needs.setup.outputs.api-endpoint}}
                  include: dist/**.js

            - name: Set version
              uses: jacobtomlinson/gha-find-replace@v2
              with:
                  find: '###APP_VERSION###'
                  replace: 'v${{needs.setup.outputs.app-version-major}}.${{needs.setup.outputs.app-version-minor}}'
                  include: dist/**.js

            - name: Upload dist
              if: success()
              uses: actions/upload-artifact@v2
              with:
                  name: pcff-app-dist
                  path: dist
                  retention-days: 7

    deploy:
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
        needs:
            - setup
            - build
        outputs:
            domain: ${{ steps.deploy-step.outputs.domain }}
            invalidation-outcome: ${{ steps.invalidate-step.outcome }}
        env:
            PIPELINE_EXECUTION_ROLE: ${{ secrets.AWS_PIPELINE_EXEC_ROLE_ARN }}
            UPLOAD_BUCKET: ${{needs.setup.outputs.upload-bucket}}
            CLOUDFRONT_DISTRIBUTION_ID: ${{needs.build.outputs.cloudfront-id}}
        steps:
            - uses: actions/checkout@v2

            - name: Download dist artifacts
              uses: actions/download-artifact@v2
              with:
                  name: pcff-app-dist
                  path: pcff-app/dist

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-region: ${{env.REGION}}
                  role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
                  # one hour
                  role-duration-seconds: 3600
                  role-skip-session-tagging: true

            - name: Remove everything
              run: aws s3 rm s3://${{ env.UPLOAD_BUCKET }} --recursive

            - name: Deploy app to S3 bucket
              id: deploy-step
              run: |
                  aws s3 cp \
                    --recursive \
                    ./pcff-app/dist/apps/pcff-app s3://${{ env.UPLOAD_BUCKET }}

            - name: Invalidate cloudfront cache
              id: invalidate-step
              env:
                  AWS_MAX_ATTEMPTS: 5
              continue-on-error: true
              run: |
                  aws cloudfront create-invalidation --paths "/*" \
                  --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}

            - name: Client Deployment Url
              uses: ./.github/actions/get-client-url
              with:
                  branch-name: ${{needs.setup.outputs.branch-name}}
                  region: ${{env.REGION}}
